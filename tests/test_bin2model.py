# 
# Copyright 2025 Yitao Zhang
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause
#

import pytest
import bin2hex.bin2model as bin2model

# Test data generated by RNG tool
test_binary_61_bytes = \
    b"\xFC\x2A\x45\x9B\x99\x5A\xA1\x74\xAB\xDC\x18\xF2\xD3\x22\x0D\xB3" \
    b"\x1E\x12\x2B\x84\xE3\xAC\x82\xD2\x4C\xC2\x10\xD6\xB9\x39\x02\xB0" \
    b"\xA7\x9B\x73\xB9\xCA\xE9\x83\xBC\x81\xF8\x01\xD9\xD9\xC1\x00\x4C" \
    b"\xC0\x74\x21\x58\x1A\x3D\x5A\x05\xE7\xFE\x82\x84\x9C"

test_binary_64_bytes = \
    b"\xFC\x2A\x45\x9B\x99\x5A\xA1\x74\xAB\xDC\x18\xF2\xD3\x22\x0D\xB3" \
    b"\x1E\x12\x2B\x84\xE3\xAC\x82\xD2\x4C\xC2\x10\xD6\xB9\x39\x02\xB0" \
    b"\xA7\x9B\x73\xB9\xCA\xE9\x83\xBC\x81\xF8\x01\xD9\xD9\xC1\x00\x4C" \
    b"\xC0\x74\x21\x58\x1A\x3D\x5A\x05\xE7\xFE\x82\x84\x9C\x74\x08\x54"

test_binary_67_bytes = \
    b"\xFC\x2A\x45\x9B\x99\x5A\xA1\x74\xAB\xDC\x18\xF2\xD3\x22\x0D\xB3" \
    b"\x1E\x12\x2B\x84\xE3\xAC\x82\xD2\x4C\xC2\x10\xD6\xB9\x39\x02\xB0" \
    b"\xA7\x9B\x73\xB9\xCA\xE9\x83\xBC\x81\xF8\x01\xD9\xD9\xC1\x00\x4C" \
    b"\xC0\x74\x21\x58\x1A\x3D\x5A\x05\xE7\xFE\x82\x84\x9C\x74\x08\x54" \
    b"\x68\x8A\x70"

# Result data and test cases

# denali
test_hex_denali_64_bytes = \
"0/FC;\n1/2A;\n2/45;\n3/9B;\n4/99;\n5/5A;\n6/A1;\n7/74;\n8/AB;\n9/DC;\nA/18;\nB/F2;\nC/D3;\nD/22;\nE/0D;\nF/B3;\n" \
"10/1E;\n11/12;\n12/2B;\n13/84;\n14/E3;\n15/AC;\n16/82;\n17/D2;\n18/4C;\n19/C2;\n1A/10;\n1B/D6;\n1C/B9;\n1D/39;\n1E/02;\n1F/B0;\n" \
"20/A7;\n21/9B;\n22/73;\n23/B9;\n24/CA;\n25/E9;\n26/83;\n27/BC;\n28/81;\n29/F8;\n2A/01;\n2B/D9;\n2C/D9;\n2D/C1;\n2E/00;\n2F/4C;\n" \
"30/C0;\n31/74;\n32/21;\n33/58;\n34/1A;\n35/3D;\n36/5A;\n37/05;\n38/E7;\n39/FE;\n3A/82;\n3B/84;\n3C/9C;\n3D/74;\n3E/08;\n3F/54;"

def test_bin_to_denali_64_bytes():
    output_data = bin2model.bin_to_denali(test_binary_64_bytes)
    assert(output_data == test_hex_denali_64_bytes)

test_hex_denali_61_bytes = \
"0/FC;\n1/2A;\n2/45;\n3/9B;\n4/99;\n5/5A;\n6/A1;\n7/74;\n8/AB;\n9/DC;\nA/18;\nB/F2;\nC/D3;\nD/22;\nE/0D;\nF/B3;\n" \
"10/1E;\n11/12;\n12/2B;\n13/84;\n14/E3;\n15/AC;\n16/82;\n17/D2;\n18/4C;\n19/C2;\n1A/10;\n1B/D6;\n1C/B9;\n1D/39;\n1E/02;\n1F/B0;\n" \
"20/A7;\n21/9B;\n22/73;\n23/B9;\n24/CA;\n25/E9;\n26/83;\n27/BC;\n28/81;\n29/F8;\n2A/01;\n2B/D9;\n2C/D9;\n2D/C1;\n2E/00;\n2F/4C;\n" \
"30/C0;\n31/74;\n32/21;\n33/58;\n34/1A;\n35/3D;\n36/5A;\n37/05;\n38/E7;\n39/FE;\n3A/82;\n3B/84;\n3C/9C;"

def test_bin_to_denali_61_bytes():
    output_data = bin2model.bin_to_denali(test_binary_61_bytes)
    assert(output_data == test_hex_denali_61_bytes)

test_hex_denali_67_bytes = \
"0/FC;\n1/2A;\n2/45;\n3/9B;\n4/99;\n5/5A;\n6/A1;\n7/74;\n8/AB;\n9/DC;\nA/18;\nB/F2;\nC/D3;\nD/22;\nE/0D;\nF/B3;\n" \
"10/1E;\n11/12;\n12/2B;\n13/84;\n14/E3;\n15/AC;\n16/82;\n17/D2;\n18/4C;\n19/C2;\n1A/10;\n1B/D6;\n1C/B9;\n1D/39;\n1E/02;\n1F/B0;\n" \
"20/A7;\n21/9B;\n22/73;\n23/B9;\n24/CA;\n25/E9;\n26/83;\n27/BC;\n28/81;\n29/F8;\n2A/01;\n2B/D9;\n2C/D9;\n2D/C1;\n2E/00;\n2F/4C;\n" \
"30/C0;\n31/74;\n32/21;\n33/58;\n34/1A;\n35/3D;\n36/5A;\n37/05;\n38/E7;\n39/FE;\n3A/82;\n3B/84;\n3C/9C;\n3D/74;\n3E/08;\n3F/54;\n" \
"40/68;\n41/8A;\n42/70;"

def test_bin_to_denali_67_bytes():
    output_data = bin2model.bin_to_denali(test_binary_67_bytes)
    assert(output_data == test_hex_denali_67_bytes)
# 
# Copyright 2025 Yitao Zhang
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause
#

import pytest
import bin2hex.bin2c as bin2c

# Test data generated by RNG tool
test_binary_61_bytes = \
    b"\xBF\x37\xB2\xB1\x1D\x48\xD4\xCC\xFB\x2B\x1D\xDE\x79\xF2\xD2\x94" \
    b"\x61\x68\xE1\x2B\x8F\x0B\x74\xC2\xC9\x2E\x4E\x87\xBE\xEE\x3D\x81" \
    b"\x2C\xE6\x53\x07\x6F\xCE\xB5\x33\xE2\x74\x17\xD9\xE8\xB1\x50\xCF" \
    b"\x7C\x58\x9A\x8F\xA3\x36\x55\x8D\x21\xA0\x73\xB2\x3C" 

test_binary_64_bytes = \
    b"\xBF\x37\xB2\xB1\x1D\x48\xD4\xCC\xFB\x2B\x1D\xDE\x79\xF2\xD2\x94" \
    b"\x61\x68\xE1\x2B\x8F\x0B\x74\xC2\xC9\x2E\x4E\x87\xBE\xEE\x3D\x81" \
    b"\x2C\xE6\x53\x07\x6F\xCE\xB5\x33\xE2\x74\x17\xD9\xE8\xB1\x50\xCF" \
    b"\x7C\x58\x9A\x8F\xA3\x36\x55\x8D\x21\xA0\x73\xB2\x3C\x22\x79\x91" 

test_binary_67_bytes = \
    b"\xBF\x37\xB2\xB1\x1D\x48\xD4\xCC\xFB\x2B\x1D\xDE\x79\xF2\xD2\x94" \
    b"\x61\x68\xE1\x2B\x8F\x0B\x74\xC2\xC9\x2E\x4E\x87\xBE\xEE\x3D\x81" \
    b"\x2C\xE6\x53\x07\x6F\xCE\xB5\x33\xE2\x74\x17\xD9\xE8\xB1\x50\xCF" \
    b"\x7C\x58\x9A\x8F\xA3\x36\x55\x8D\x21\xA0\x73\xB2\x3C\x22\x79\x91" \
    b"\x2E\xE5\x58"

# Result data and test cases

# uint8
test_hex_uint8_64_bytes_16_align = \
    "0xBF, 0x37, 0xB2, 0xB1, 0x1D, 0x48, 0xD4, 0xCC, 0xFB, 0x2B, 0x1D, 0xDE, 0x79, 0xF2, 0xD2, 0x94,\n" \
    "0x61, 0x68, 0xE1, 0x2B, 0x8F, 0x0B, 0x74, 0xC2, 0xC9, 0x2E, 0x4E, 0x87, 0xBE, 0xEE, 0x3D, 0x81,\n" \
    "0x2C, 0xE6, 0x53, 0x07, 0x6F, 0xCE, 0xB5, 0x33, 0xE2, 0x74, 0x17, 0xD9, 0xE8, 0xB1, 0x50, 0xCF,\n" \
    "0x7C, 0x58, 0x9A, 0x8F, 0xA3, 0x36, 0x55, 0x8D, 0x21, 0xA0, 0x73, 0xB2, 0x3C, 0x22, 0x79, 0x91"

def test_bin_to_c_uint8_64_bytes_16_align():
    output_data = bin2c.bin_to_c_uint8(test_binary_64_bytes, 16)
    assert(output_data == test_hex_uint8_64_bytes_16_align)

test_hex_uint8_61_bytes_16_align = \
    "0xBF, 0x37, 0xB2, 0xB1, 0x1D, 0x48, 0xD4, 0xCC, 0xFB, 0x2B, 0x1D, 0xDE, 0x79, 0xF2, 0xD2, 0x94,\n" \
    "0x61, 0x68, 0xE1, 0x2B, 0x8F, 0x0B, 0x74, 0xC2, 0xC9, 0x2E, 0x4E, 0x87, 0xBE, 0xEE, 0x3D, 0x81,\n" \
    "0x2C, 0xE6, 0x53, 0x07, 0x6F, 0xCE, 0xB5, 0x33, 0xE2, 0x74, 0x17, 0xD9, 0xE8, 0xB1, 0x50, 0xCF,\n" \
    "0x7C, 0x58, 0x9A, 0x8F, 0xA3, 0x36, 0x55, 0x8D, 0x21, 0xA0, 0x73, 0xB2, 0x3C"

def test_bin_to_c_uint8_61_bytes_16_align():
    output_data = bin2c.bin_to_c_uint8(test_binary_61_bytes, 16)
    assert(output_data == test_hex_uint8_61_bytes_16_align)

test_hex_uint8_67_bytes_16_align = \
    "0xBF, 0x37, 0xB2, 0xB1, 0x1D, 0x48, 0xD4, 0xCC, 0xFB, 0x2B, 0x1D, 0xDE, 0x79, 0xF2, 0xD2, 0x94,\n" \
    "0x61, 0x68, 0xE1, 0x2B, 0x8F, 0x0B, 0x74, 0xC2, 0xC9, 0x2E, 0x4E, 0x87, 0xBE, 0xEE, 0x3D, 0x81,\n" \
    "0x2C, 0xE6, 0x53, 0x07, 0x6F, 0xCE, 0xB5, 0x33, 0xE2, 0x74, 0x17, 0xD9, 0xE8, 0xB1, 0x50, 0xCF,\n" \
    "0x7C, 0x58, 0x9A, 0x8F, 0xA3, 0x36, 0x55, 0x8D, 0x21, 0xA0, 0x73, 0xB2, 0x3C, 0x22, 0x79, 0x91,\n" \
    "0x2E, 0xE5, 0x58"

def test_bin_to_c_uint8_67_bytes_16_align():
    output_data = bin2c.bin_to_c_uint8(test_binary_67_bytes, 16)
    assert(output_data == test_hex_uint8_67_bytes_16_align)

test_hex_uint8_64_bytes_13_align = \
    "0xBF, 0x37, 0xB2, 0xB1, 0x1D, 0x48, 0xD4, 0xCC, 0xFB, 0x2B, 0x1D, 0xDE, 0x79,\n" \
    "0xF2, 0xD2, 0x94, 0x61, 0x68, 0xE1, 0x2B, 0x8F, 0x0B, 0x74, 0xC2, 0xC9, 0x2E,\n" \
    "0x4E, 0x87, 0xBE, 0xEE, 0x3D, 0x81, 0x2C, 0xE6, 0x53, 0x07, 0x6F, 0xCE, 0xB5,\n" \
    "0x33, 0xE2, 0x74, 0x17, 0xD9, 0xE8, 0xB1, 0x50, 0xCF, 0x7C, 0x58, 0x9A, 0x8F,\n" \
    "0xA3, 0x36, 0x55, 0x8D, 0x21, 0xA0, 0x73, 0xB2, 0x3C, 0x22, 0x79, 0x91"

def test_bin_to_c_uint8_64_bytes_13_align():
    output_data = bin2c.bin_to_c_uint8(test_binary_64_bytes, 13)
    assert(output_data == test_hex_uint8_64_bytes_13_align)

test_hex_uint8_61_bytes_13_align = \
    "0xBF, 0x37, 0xB2, 0xB1, 0x1D, 0x48, 0xD4, 0xCC, 0xFB, 0x2B, 0x1D, 0xDE, 0x79,\n" \
    "0xF2, 0xD2, 0x94, 0x61, 0x68, 0xE1, 0x2B, 0x8F, 0x0B, 0x74, 0xC2, 0xC9, 0x2E,\n" \
    "0x4E, 0x87, 0xBE, 0xEE, 0x3D, 0x81, 0x2C, 0xE6, 0x53, 0x07, 0x6F, 0xCE, 0xB5,\n" \
    "0x33, 0xE2, 0x74, 0x17, 0xD9, 0xE8, 0xB1, 0x50, 0xCF, 0x7C, 0x58, 0x9A, 0x8F,\n" \
    "0xA3, 0x36, 0x55, 0x8D, 0x21, 0xA0, 0x73, 0xB2, 0x3C"

def test_bin_to_c_uint8_61_bytes_13_align():
    output_data = bin2c.bin_to_c_uint8(test_binary_61_bytes, 13)
    assert(output_data == test_hex_uint8_61_bytes_13_align)

test_hex_uint8_67_bytes_13_align = \
    "0xBF, 0x37, 0xB2, 0xB1, 0x1D, 0x48, 0xD4, 0xCC, 0xFB, 0x2B, 0x1D, 0xDE, 0x79,\n" \
    "0xF2, 0xD2, 0x94, 0x61, 0x68, 0xE1, 0x2B, 0x8F, 0x0B, 0x74, 0xC2, 0xC9, 0x2E,\n" \
    "0x4E, 0x87, 0xBE, 0xEE, 0x3D, 0x81, 0x2C, 0xE6, 0x53, 0x07, 0x6F, 0xCE, 0xB5,\n" \
    "0x33, 0xE2, 0x74, 0x17, 0xD9, 0xE8, 0xB1, 0x50, 0xCF, 0x7C, 0x58, 0x9A, 0x8F,\n" \
    "0xA3, 0x36, 0x55, 0x8D, 0x21, 0xA0, 0x73, 0xB2, 0x3C, 0x22, 0x79, 0x91, 0x2E,\n" \
    "0xE5, 0x58"

def test_bin_to_c_uint8_67_bytes_13_align():
    output_data = bin2c.bin_to_c_uint8(test_binary_67_bytes, 13)
    assert(output_data == test_hex_uint8_67_bytes_13_align)

test_hex_uint8_64_bytes_17_align = \
    "0xBF, 0x37, 0xB2, 0xB1, 0x1D, 0x48, 0xD4, 0xCC, 0xFB, 0x2B, 0x1D, 0xDE, 0x79, 0xF2, 0xD2, 0x94, 0x61,\n" \
    "0x68, 0xE1, 0x2B, 0x8F, 0x0B, 0x74, 0xC2, 0xC9, 0x2E, 0x4E, 0x87, 0xBE, 0xEE, 0x3D, 0x81, 0x2C, 0xE6,\n" \
    "0x53, 0x07, 0x6F, 0xCE, 0xB5, 0x33, 0xE2, 0x74, 0x17, 0xD9, 0xE8, 0xB1, 0x50, 0xCF, 0x7C, 0x58, 0x9A,\n" \
    "0x8F, 0xA3, 0x36, 0x55, 0x8D, 0x21, 0xA0, 0x73, 0xB2, 0x3C, 0x22, 0x79, 0x91"

def test_bin_to_c_uint8_64_bytes_17_align():
    output_data = bin2c.bin_to_c_uint8(test_binary_64_bytes, 17)
    assert(output_data == test_hex_uint8_64_bytes_17_align)

test_hex_uint8_61_bytes_17_align = \
    "0xBF, 0x37, 0xB2, 0xB1, 0x1D, 0x48, 0xD4, 0xCC, 0xFB, 0x2B, 0x1D, 0xDE, 0x79, 0xF2, 0xD2, 0x94, 0x61,\n" \
    "0x68, 0xE1, 0x2B, 0x8F, 0x0B, 0x74, 0xC2, 0xC9, 0x2E, 0x4E, 0x87, 0xBE, 0xEE, 0x3D, 0x81, 0x2C, 0xE6,\n" \
    "0x53, 0x07, 0x6F, 0xCE, 0xB5, 0x33, 0xE2, 0x74, 0x17, 0xD9, 0xE8, 0xB1, 0x50, 0xCF, 0x7C, 0x58, 0x9A,\n" \
    "0x8F, 0xA3, 0x36, 0x55, 0x8D, 0x21, 0xA0, 0x73, 0xB2, 0x3C"

def test_bin_to_c_uint8_61_bytes_17_align():
    output_data = bin2c.bin_to_c_uint8(test_binary_61_bytes, 17)
    assert(output_data == test_hex_uint8_61_bytes_17_align)

test_hex_uint8_67_bytes_17_align = \
    "0xBF, 0x37, 0xB2, 0xB1, 0x1D, 0x48, 0xD4, 0xCC, 0xFB, 0x2B, 0x1D, 0xDE, 0x79, 0xF2, 0xD2, 0x94, 0x61,\n" \
    "0x68, 0xE1, 0x2B, 0x8F, 0x0B, 0x74, 0xC2, 0xC9, 0x2E, 0x4E, 0x87, 0xBE, 0xEE, 0x3D, 0x81, 0x2C, 0xE6,\n" \
    "0x53, 0x07, 0x6F, 0xCE, 0xB5, 0x33, 0xE2, 0x74, 0x17, 0xD9, 0xE8, 0xB1, 0x50, 0xCF, 0x7C, 0x58, 0x9A,\n" \
    "0x8F, 0xA3, 0x36, 0x55, 0x8D, 0x21, 0xA0, 0x73, 0xB2, 0x3C, 0x22, 0x79, 0x91, 0x2E, 0xE5, 0x58"

def test_bin_to_c_uint8_67_bytes_17_align():
    output_data = bin2c.bin_to_c_uint8(test_binary_67_bytes, 17)
    assert(output_data == test_hex_uint8_67_bytes_17_align)

# uint16
test_hex_uint16_64_bytes_16_align = \
    "0x37BF, 0xB1B2, 0x481D, 0xCCD4, 0x2BFB, 0xDE1D, 0xF279, 0x94D2,\n" \
    "0x6861, 0x2BE1, 0x0B8F, 0xC274, 0x2EC9, 0x874E, 0xEEBE, 0x813D,\n" \
    "0xE62C, 0x0753, 0xCE6F, 0x33B5, 0x74E2, 0xD917, 0xB1E8, 0xCF50,\n" \
    "0x587C, 0x8F9A, 0x36A3, 0x8D55, 0xA021, 0xB273, 0x223C, 0x9179"

def test_bin_to_c_uint16_64_bytes_16_align():
    output_data = bin2c.bin_to_c_uint16(test_binary_64_bytes, 16)
    assert(output_data == test_hex_uint16_64_bytes_16_align)

test_hex_uint16_61_bytes_16_align = \
    "0x37BF, 0xB1B2, 0x481D, 0xCCD4, 0x2BFB, 0xDE1D, 0xF279, 0x94D2,\n" \
    "0x6861, 0x2BE1, 0x0B8F, 0xC274, 0x2EC9, 0x874E, 0xEEBE, 0x813D,\n" \
    "0xE62C, 0x0753, 0xCE6F, 0x33B5, 0x74E2, 0xD917, 0xB1E8, 0xCF50,\n" \
    "0x587C, 0x8F9A, 0x36A3, 0x8D55, 0xA021, 0xB273, 0x003C"

def test_bin_to_c_uint16_61_bytes_16_align():
    output_data = bin2c.bin_to_c_uint16(test_binary_61_bytes, 16)
    assert(output_data == test_hex_uint16_61_bytes_16_align)

test_hex_uint16_67_bytes_16_align = \
    "0x37BF, 0xB1B2, 0x481D, 0xCCD4, 0x2BFB, 0xDE1D, 0xF279, 0x94D2,\n" \
    "0x6861, 0x2BE1, 0x0B8F, 0xC274, 0x2EC9, 0x874E, 0xEEBE, 0x813D,\n" \
    "0xE62C, 0x0753, 0xCE6F, 0x33B5, 0x74E2, 0xD917, 0xB1E8, 0xCF50,\n" \
    "0x587C, 0x8F9A, 0x36A3, 0x8D55, 0xA021, 0xB273, 0x223C, 0x9179,\n" \
    "0xE52E, 0x0058"

def test_bin_to_c_uint16_67_bytes_16_align():
    output_data = bin2c.bin_to_c_uint16(test_binary_67_bytes, 16)
    assert(output_data == test_hex_uint16_67_bytes_16_align)

test_hex_uint16_64_bytes_13_align = \
    "0x37BF, 0xB1B2, 0x481D, 0xCCD4, 0x2BFB, 0xDE1D, 0xF279,\n" \
    "0x94D2, 0x6861, 0x2BE1, 0x0B8F, 0xC274, 0x2EC9, 0x874E,\n" \
    "0xEEBE, 0x813D, 0xE62C, 0x0753, 0xCE6F, 0x33B5, 0x74E2,\n" \
    "0xD917, 0xB1E8, 0xCF50, 0x587C, 0x8F9A, 0x36A3, 0x8D55,\n" \
    "0xA021, 0xB273, 0x223C, 0x9179"

def test_bin_to_c_uint16_64_bytes_13_align():
    output_data = bin2c.bin_to_c_uint16(test_binary_64_bytes, 13)
    assert(output_data == test_hex_uint16_64_bytes_13_align)

test_hex_uint16_61_bytes_13_align = \
    "0x37BF, 0xB1B2, 0x481D, 0xCCD4, 0x2BFB, 0xDE1D, 0xF279,\n" \
    "0x94D2, 0x6861, 0x2BE1, 0x0B8F, 0xC274, 0x2EC9, 0x874E,\n" \
    "0xEEBE, 0x813D, 0xE62C, 0x0753, 0xCE6F, 0x33B5, 0x74E2,\n" \
    "0xD917, 0xB1E8, 0xCF50, 0x587C, 0x8F9A, 0x36A3, 0x8D55,\n" \
    "0xA021, 0xB273, 0x003C"

def test_bin_to_c_uint16_61_bytes_13_align():
    output_data = bin2c.bin_to_c_uint16(test_binary_61_bytes, 13)
    assert(output_data == test_hex_uint16_61_bytes_13_align)

test_hex_uint16_67_bytes_13_align = \
    "0x37BF, 0xB1B2, 0x481D, 0xCCD4, 0x2BFB, 0xDE1D, 0xF279,\n" \
    "0x94D2, 0x6861, 0x2BE1, 0x0B8F, 0xC274, 0x2EC9, 0x874E,\n" \
    "0xEEBE, 0x813D, 0xE62C, 0x0753, 0xCE6F, 0x33B5, 0x74E2,\n" \
    "0xD917, 0xB1E8, 0xCF50, 0x587C, 0x8F9A, 0x36A3, 0x8D55,\n" \
    "0xA021, 0xB273, 0x223C, 0x9179, 0xE52E, 0x0058"

def test_bin_to_c_uint16_67_bytes_13_align():
    output_data = bin2c.bin_to_c_uint16(test_binary_67_bytes, 13)
    assert(output_data == test_hex_uint16_67_bytes_13_align)

# uint32
test_hex_uint32_64_bytes_16_align = \
    "0xB1B237BF, 0xCCD4481D, 0xDE1D2BFB, 0x94D2F279,\n" \
    "0x2BE16861, 0xC2740B8F, 0x874E2EC9, 0x813DEEBE,\n" \
    "0x0753E62C, 0x33B5CE6F, 0xD91774E2, 0xCF50B1E8,\n" \
    "0x8F9A587C, 0x8D5536A3, 0xB273A021, 0x9179223C"

def test_bin_to_c_uint32_64_bytes_16_align():
    output_data = bin2c.bin_to_c_uint32(test_binary_64_bytes, 16)
    assert(output_data == test_hex_uint32_64_bytes_16_align)

test_hex_uint32_61_bytes_16_align = \
    "0xB1B237BF, 0xCCD4481D, 0xDE1D2BFB, 0x94D2F279,\n" \
    "0x2BE16861, 0xC2740B8F, 0x874E2EC9, 0x813DEEBE,\n" \
    "0x0753E62C, 0x33B5CE6F, 0xD91774E2, 0xCF50B1E8,\n" \
    "0x8F9A587C, 0x8D5536A3, 0xB273A021, 0x0000003C"

def test_bin_to_c_uint32_61_bytes_16_align():
    output_data = bin2c.bin_to_c_uint32(test_binary_61_bytes, 16)
    assert(output_data == test_hex_uint32_61_bytes_16_align)

test_hex_uint32_67_bytes_16_align = \
    "0xB1B237BF, 0xCCD4481D, 0xDE1D2BFB, 0x94D2F279,\n" \
    "0x2BE16861, 0xC2740B8F, 0x874E2EC9, 0x813DEEBE,\n" \
    "0x0753E62C, 0x33B5CE6F, 0xD91774E2, 0xCF50B1E8,\n" \
    "0x8F9A587C, 0x8D5536A3, 0xB273A021, 0x9179223C,\n" \
    "0x0058E52E"

def test_bin_to_c_uint32_67_bytes_16_align():
    output_data = bin2c.bin_to_c_uint32(test_binary_67_bytes, 16)
    assert(output_data == test_hex_uint32_67_bytes_16_align)

test_hex_uint32_64_bytes_13_align = \
    "0xB1B237BF, 0xCCD4481D, 0xDE1D2BFB, 0x94D2F279,\n" \
    "0x2BE16861, 0xC2740B8F, 0x874E2EC9, 0x813DEEBE,\n" \
    "0x0753E62C, 0x33B5CE6F, 0xD91774E2, 0xCF50B1E8,\n" \
    "0x8F9A587C, 0x8D5536A3, 0xB273A021, 0x9179223C"

def test_bin_to_c_uint32_64_bytes_13_align():
    output_data = bin2c.bin_to_c_uint32(test_binary_64_bytes, 13)
    assert(output_data == test_hex_uint32_64_bytes_13_align)

test_hex_uint32_61_bytes_13_align = \
    "0xB1B237BF, 0xCCD4481D, 0xDE1D2BFB, 0x94D2F279,\n" \
    "0x2BE16861, 0xC2740B8F, 0x874E2EC9, 0x813DEEBE,\n" \
    "0x0753E62C, 0x33B5CE6F, 0xD91774E2, 0xCF50B1E8,\n" \
    "0x8F9A587C, 0x8D5536A3, 0xB273A021, 0x0000003C"

def test_bin_to_c_uint32_61_bytes_13_align():
    output_data = bin2c.bin_to_c_uint32(test_binary_61_bytes, 13)
    assert(output_data == test_hex_uint32_61_bytes_13_align)

test_hex_uint32_67_bytes_13_align = \
    "0xB1B237BF, 0xCCD4481D, 0xDE1D2BFB, 0x94D2F279,\n" \
    "0x2BE16861, 0xC2740B8F, 0x874E2EC9, 0x813DEEBE,\n" \
    "0x0753E62C, 0x33B5CE6F, 0xD91774E2, 0xCF50B1E8,\n" \
    "0x8F9A587C, 0x8D5536A3, 0xB273A021, 0x9179223C,\n" \
    "0x0058E52E"

def test_bin_to_c_uint32_67_bytes_13_align():
    output_data = bin2c.bin_to_c_uint32(test_binary_67_bytes, 13)
    assert(output_data == test_hex_uint32_67_bytes_13_align)

test_hex_uint32_64_bytes_17_align = \
    "0xB1B237BF, 0xCCD4481D, 0xDE1D2BFB, 0x94D2F279, 0x2BE16861,\n" \
    "0xC2740B8F, 0x874E2EC9, 0x813DEEBE, 0x0753E62C, 0x33B5CE6F,\n" \
    "0xD91774E2, 0xCF50B1E8, 0x8F9A587C, 0x8D5536A3, 0xB273A021,\n" \
    "0x9179223C"

def test_bin_to_c_uint32_64_bytes_17_align():
    output_data = bin2c.bin_to_c_uint32(test_binary_64_bytes, 17)
    assert(output_data == test_hex_uint32_64_bytes_17_align)

test_hex_uint32_61_bytes_17_align = \
    "0xB1B237BF, 0xCCD4481D, 0xDE1D2BFB, 0x94D2F279, 0x2BE16861,\n" \
    "0xC2740B8F, 0x874E2EC9, 0x813DEEBE, 0x0753E62C, 0x33B5CE6F,\n" \
    "0xD91774E2, 0xCF50B1E8, 0x8F9A587C, 0x8D5536A3, 0xB273A021,\n" \
    "0x0000003C"

def test_bin_to_c_uint32_61_bytes_17_align():
    output_data = bin2c.bin_to_c_uint32(test_binary_61_bytes, 17)
    assert(output_data == test_hex_uint32_61_bytes_17_align)

test_hex_uint32_67_bytes_17_align = \
    "0xB1B237BF, 0xCCD4481D, 0xDE1D2BFB, 0x94D2F279, 0x2BE16861,\n" \
    "0xC2740B8F, 0x874E2EC9, 0x813DEEBE, 0x0753E62C, 0x33B5CE6F,\n" \
    "0xD91774E2, 0xCF50B1E8, 0x8F9A587C, 0x8D5536A3, 0xB273A021,\n" \
    "0x9179223C, 0x0058E52E"

def test_bin_to_c_uint32_67_bytes_17_align():
    output_data = bin2c.bin_to_c_uint32(test_binary_67_bytes, 17)
    assert(output_data == test_hex_uint32_67_bytes_17_align)

# uint64
test_hex_uint64_64_bytes_16_align = \
    "0xCCD4481DB1B237BF, 0x94D2F279DE1D2BFB,\n" \
    "0xC2740B8F2BE16861, 0x813DEEBE874E2EC9,\n" \
    "0x33B5CE6F0753E62C, 0xCF50B1E8D91774E2,\n" \
    "0x8D5536A38F9A587C, 0x9179223CB273A021"

def test_bin_to_c_uint64_64_bytes_16_align():
    output_data = bin2c.bin_to_c_uint64(test_binary_64_bytes, 16)
    assert(output_data == test_hex_uint64_64_bytes_16_align)

test_hex_uint64_61_bytes_16_align = \
    "0xCCD4481DB1B237BF, 0x94D2F279DE1D2BFB,\n" \
    "0xC2740B8F2BE16861, 0x813DEEBE874E2EC9,\n" \
    "0x33B5CE6F0753E62C, 0xCF50B1E8D91774E2,\n" \
    "0x8D5536A38F9A587C, 0x0000003CB273A021"

def test_bin_to_c_uint64_61_bytes_16_align():
    output_data = bin2c.bin_to_c_uint64(test_binary_61_bytes, 16)
    assert(output_data == test_hex_uint64_61_bytes_16_align)

test_hex_uint64_67_bytes_16_align = \
    "0xCCD4481DB1B237BF, 0x94D2F279DE1D2BFB,\n" \
    "0xC2740B8F2BE16861, 0x813DEEBE874E2EC9,\n" \
    "0x33B5CE6F0753E62C, 0xCF50B1E8D91774E2,\n" \
    "0x8D5536A38F9A587C, 0x9179223CB273A021,\n" \
    "0x000000000058E52E"

def test_bin_to_c_uint64_67_bytes_16_align():
    output_data = bin2c.bin_to_c_uint64(test_binary_67_bytes, 16)
    assert(output_data == test_hex_uint64_67_bytes_16_align)

test_hex_uint64_64_bytes_13_align = \
    "0xCCD4481DB1B237BF, 0x94D2F279DE1D2BFB,\n" \
    "0xC2740B8F2BE16861, 0x813DEEBE874E2EC9,\n" \
    "0x33B5CE6F0753E62C, 0xCF50B1E8D91774E2,\n" \
    "0x8D5536A38F9A587C, 0x9179223CB273A021"

def test_bin_to_c_uint64_64_bytes_13_align():
    output_data = bin2c.bin_to_c_uint64(test_binary_64_bytes, 13)
    assert(output_data == test_hex_uint64_64_bytes_16_align)

test_hex_uint64_61_bytes_13_align = \
    "0xCCD4481DB1B237BF, 0x94D2F279DE1D2BFB,\n" \
    "0xC2740B8F2BE16861, 0x813DEEBE874E2EC9,\n" \
    "0x33B5CE6F0753E62C, 0xCF50B1E8D91774E2,\n" \
    "0x8D5536A38F9A587C, 0x0000003CB273A021"

def test_bin_to_c_uint64_61_bytes_13_align():
    output_data = bin2c.bin_to_c_uint64(test_binary_61_bytes, 13)
    assert(output_data == test_hex_uint64_61_bytes_13_align)

test_hex_uint64_67_bytes_13_align = \
    "0xCCD4481DB1B237BF, 0x94D2F279DE1D2BFB,\n" \
    "0xC2740B8F2BE16861, 0x813DEEBE874E2EC9,\n" \
    "0x33B5CE6F0753E62C, 0xCF50B1E8D91774E2,\n" \
    "0x8D5536A38F9A587C, 0x9179223CB273A021,\n" \
    "0x000000000058E52E"

def test_bin_to_c_uint64_67_bytes_13_align():
    output_data = bin2c.bin_to_c_uint64(test_binary_67_bytes, 13)
    assert(output_data == test_hex_uint64_67_bytes_13_align)

test_hex_uint64_64_bytes_17_align = \
    "0xCCD4481DB1B237BF, 0x94D2F279DE1D2BFB, 0xC2740B8F2BE16861,\n" \
    "0x813DEEBE874E2EC9, 0x33B5CE6F0753E62C, 0xCF50B1E8D91774E2,\n" \
    "0x8D5536A38F9A587C, 0x9179223CB273A021"

def test_bin_to_c_uint64_64_bytes_17_align():
    output_data = bin2c.bin_to_c_uint64(test_binary_64_bytes, 17)
    assert(output_data == test_hex_uint64_64_bytes_17_align)

test_hex_uint64_61_bytes_17_align = \
    "0xCCD4481DB1B237BF, 0x94D2F279DE1D2BFB, 0xC2740B8F2BE16861,\n" \
    "0x813DEEBE874E2EC9, 0x33B5CE6F0753E62C, 0xCF50B1E8D91774E2,\n" \
    "0x8D5536A38F9A587C, 0x0000003CB273A021"

def test_bin_to_c_uint64_61_bytes_17_align():
    output_data = bin2c.bin_to_c_uint64(test_binary_61_bytes, 17)
    assert(output_data == test_hex_uint64_61_bytes_17_align)

test_hex_uint64_67_bytes_17_align = \
    "0xCCD4481DB1B237BF, 0x94D2F279DE1D2BFB, 0xC2740B8F2BE16861,\n" \
    "0x813DEEBE874E2EC9, 0x33B5CE6F0753E62C, 0xCF50B1E8D91774E2,\n" \
    "0x8D5536A38F9A587C, 0x9179223CB273A021, 0x000000000058E52E"

def test_bin_to_c_uint64_67_bytes_17_align():
    output_data = bin2c.bin_to_c_uint64(test_binary_67_bytes, 17)
    assert(output_data == test_hex_uint64_67_bytes_17_align)